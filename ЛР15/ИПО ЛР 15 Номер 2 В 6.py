import time  # Импорт модуля для работы с временем
import random  # Импорт модуля для генерации случайных чисел

def bubble_sort_desc(arr):
    """
    Реализация сортировки пузырьком в порядке убывания.

    :param arr: Список, который нужно отсортировать.
    """
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] < arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

def measure_time(func, arr):
    """
    Измерение времени выполнения заданной функции.

    :param func: Функция, время выполнения которой измеряется.
    :param arr: Аргументы функции.
    :return: Время выполнения функции в секундах.
    """
    start_time = time.time()  # Запись текущего времени перед выполнением функции
    func(arr)  # Выполнение функции
    return time.time() - start_time  # Вычисление времени выполнения функции

table = "| № | Колличество Эллементов | Время выполнения  |\n"  # Создание заголовок таблицы 
table += "|---|---------------------|-----------------|\n"  # Создание разделительной строки таблицы
for i, size in enumerate([10, 100, 1000, 10000, 100000], 1):
    arr = [random.randint(1, 1000) for _ in range(size)]  # Генерация случайного списка заданного размера
    sort_time = measure_time(bubble_sort_desc, arr.copy())  # Измерение времени сортировки пузырьком
    table += f"| {i} | {size} | {sort_time:.6f} seconds |\n"  # Добавление строки с результатами в таблицу

print(table)  # Вывод таблицы с результатами сортировки для различных размеров списков